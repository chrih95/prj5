package prj5;

/**
 * 
 * @author Christian Hawkes
 * @version (4.16.16)
 *
 */
public class LinkedListTest extends student.TestCase {
    
    private LinkedList<String> list;
    
    /**
     * Sets it up
     */
    public void setUp() {
        list = new LinkedList<String>();
    
    }
    
    /**
     * Tests the getLength() method
     */
    public void testGetLength() {
        assertEquals(0, list.getLength());
        list.add("bob");
        assertEquals(1, list.getLength());
        assertEquals("bob", list.getEntry(0));
    } 
    
    /**
     * Tests the add() method
     */
    public void testAdd() {        
        assertEquals(0, list.getLength());
        list.add("bob");
        assertEquals(1, list.getLength());
        list.add("bob");
        list.add("bob");
        list.add("bob");
        list.add("bob");
        list.add("frank");
        assertEquals(6, list.getLength()); 
        assertEquals("frank", list.getEntry(0));
    }
    
    /**
     * Tests the isEmpty() method
     */
    public void testIsEmpty() {
        assertTrue(list.isEmpty());
        list.add("bob");
        assertFalse(list.isEmpty());
    }
    
    /**
     * Tests the remove() method
     */
    public void testRemove() {
        assertEquals(0, list.getLength());
        list.add("bob");
        assertEquals(1, list.getLength());
        assertEquals("bob", list.remove(1));
        assertEquals(0, list.getLength());
        list.add("bob");
        list.add("bob");
        list.add("frank");
        assertEquals(3, list.getLength());
        assertEquals("bob", list.remove(2));
        assertEquals(2, list.getLength());
        
    }
    
    /**
     * Tests the getEntry() method
     */
    public void testGetEntry() {
        list.add("bob");
        list.add("tom");
        list.add("lilly");
        list.add("tim");
        list.add("frank");
        
        assertEquals("frank", list.getEntry(0));
        assertEquals("lilly", list.getEntry(2));
        assertEquals("bob", list.getEntry(4));
        
    }
    
    /**
     * Tests the contains() method
     */
    public void testContains() {
        assertFalse(list.contains("bob"));
        list.add("bob");
        list.add("tom");
        list.add("lilly");
        list.add("tim");
        list.add("frank");
        assertTrue(list.contains("bob"));
        assertTrue(list.contains("lilly"));
        assertTrue(list.contains("frank"));
        assertFalse(list.contains("cordellia"));
    }
    
    /**
     * Tests the clear() method
     */
    public void testClear() {
        list.add("bob");
        list.add("tom");
        list.add("lilly");
        list.add("tim");
        list.add("frank");
        assertEquals(5, list.getLength());
        list.clear();
        assertEquals(0, list.getLength());
    }
    
    /**
     * Tests the replace() method
     */
    public void testReplace() {
        list.add("bob");
        list.add("tom");
        list.add("lilly");
        list.add("tim");
        list.add("frank");
        
        assertEquals("bob", list.getEntry(4));
        assertEquals("bob", list.replace(4, "fred"));
        assertEquals("fred", list.getEntry(4));
        
        assertEquals("lilly", list.getEntry(2));
        assertEquals("lilly", list.replace(2, "sam"));
        assertEquals("sam", list.getEntry(2));
        
        assertEquals("frank", list.getEntry(0));
        assertEquals("frank", list.replace(0, "john"));
        assertEquals("john", list.getEntry(0));
    }
    
    /**
     * Tests the toArray() method
     */
    public void testToArray() {
        list.add("bob");
        list.add("tom");
        list.add("lilly");
        list.add("tim");
        list.add("frank");
        
        Object[] newArray = new Object[5];
        assertEquals(newArray.length, list.toArray().length);
    }
    
    /**
     * Tests the insertionSort() method
     */
    public void testInsertionSort() {
        CompareArtist comparer = new CompareArtist();
        LinkedList<Song> songList = new LinkedList<Song>();
        Song songHello = new Song("Pop", "Adele", "Hello", 2016, 23);
        Song songYeah = new Song("Hip Hop", "Usher", "Yeah!", 2004, 5);
        songList.add(songHello);
        songList.add(songYeah);
        assertEquals(songYeah, songList.getEntry(0));
        assertEquals(songHello, songList.getEntry(1));
        
        songList.insertionSort(comparer);
        assertEquals(songHello, songList.getEntry(0));
        assertEquals(songYeah, songList.getEntry(1));
    }
}
