package prj5;

import java.awt.Color;
import CS2114.Button;
import CS2114.Shape;
import CS2114.Window;
import CS2114.WindowSide;
import CS2114.TextShape;

/**
 * Creates the game window with the buttons, glyphs, and a legend.
 * 
 * @author Christian Hawkes
 */
public class GUIMusicWindow {

    private Button previousButton;
    private Button nextButton;
    private Button sortByArtistButton;
    private Button sortByTitleButton;
    private Button sortByYearButton;
    private Button sortByGenreButton;
    private Button representHobbyButton;
    private Button representMajorButton;
    private Button representRegionButton;
    private Button quitButton;
    private Window window;
    private DataList list;
    private LinkedList<Song> songList;
    private String represent;
    private String sort;
    private int index;
    private boolean clickedRepresent;
    private int numGlyphs;

    /**
     * Instantiates all the buttons, builds the glyphs, and creates the legend.
     * 
     * @param list
     *            The data list
     */
    public GUIMusicWindow(DataList list) {

        window = new Window("Project 5");

        previousButton = new Button("<-- Prev");
        nextButton = new Button("Next -->");
        sortByArtistButton = new Button("Sort By Artist Name");
        sortByTitleButton = new Button("Sort By Song Title");
        sortByYearButton = new Button("Sort By Release Year");
        sortByGenreButton = new Button("Sort By Genre");
        representHobbyButton = new Button("Represent Hobby");
        representMajorButton = new Button("Represent Major");
        representRegionButton = new Button("Represent Region");
        quitButton = new Button("Quit");

        this.list = list;

        window.addButton(previousButton, WindowSide.NORTH);
        window.addButton(sortByArtistButton, WindowSide.NORTH);
        window.addButton(sortByTitleButton, WindowSide.NORTH);
        window.addButton(sortByYearButton, WindowSide.NORTH);
        window.addButton(sortByGenreButton, WindowSide.NORTH);
        window.addButton(nextButton, WindowSide.NORTH);
        previousButton.disable();
        nextButton.disable();

        window.addButton(representHobbyButton, WindowSide.SOUTH);
        window.addButton(representMajorButton, WindowSide.SOUTH);
        window.addButton(representRegionButton, WindowSide.SOUTH);
        window.addButton(quitButton, WindowSide.SOUTH);

        quitButton.onClick(this, "clickedQuit");
        previousButton.onClick(this, "clickedMove");
        nextButton.onClick(this, "clickedMove");
        sortByArtistButton.onClick(this, "clickedCategory");
        sortByTitleButton.onClick(this, "clickedCategory");
        sortByYearButton.onClick(this, "clickedCategory");
        sortByGenreButton.onClick(this, "clickedCategory");
        representHobbyButton.onClick(this, "clickedRepresentation");
        representMajorButton.onClick(this, "clickedRepresentation");
        representRegionButton.onClick(this, "clickedRepresentation");

        sortByArtistButton.disable();
        sortByTitleButton.disable();
        sortByYearButton.disable();
        sortByGenreButton.disable();

        clickedRepresent = false;
        window.setSize(1020, 770);
        represent = "";
        sort = "";
        index = 0;
        numGlyphs = 0;
        songList = list.getSongList();

    }

    /**
     * Returns the window.
     * 
     * @return the window
     */
    public Window getWindow() {
        return window;
    }

    /**
     * Creates the legend in the lower right hand corner of the window that
     * shows how the survey results are currently being represented.
     */
    public void makeLegend() {

        int x = (window.getGraphPanelWidth() / 2) + 340;
        int y = (window.getGraphPanelHeight() / 2) + 70;
        Shape legend = new Shape(x, y, 150, 250, Color.WHITE);
        legend.setForegroundColor(Color.BLACK);

        legendRepresent(x, y);

        TextShape songTitle = new TextShape(x + 45, y + 140, "Song Title");
        TextShape heardText = new TextShape(x + 20, y + 180, "Heard");
        TextShape likedText = new TextShape(x + 100, y + 180, "Liked");
        Shape legendDivider = new Shape(x + 80, y + 160, 5, 60, Color.BLACK);

        songTitle.setBackgroundColor(Color.WHITE);
        heardText.setBackgroundColor(Color.WHITE);
        likedText.setBackgroundColor(Color.WHITE);

        window.addShape(songTitle);
        window.addShape(heardText);
        window.addShape(legendDivider);
        window.addShape(likedText);
        window.addShape(legend);
        window.moveToBack(legend);
    }

    /**
     * Changes the list of songs represented on the screen based on which sort
     * button was pressed.
     * 
     * @param button
     *            The sortBy button
     */
    public void clickedCategory(Button button) {

        if (button.equals(sortByArtistButton)) {

            list.sortByArtist();
            sort = "";
        }

        else if (button.equals(sortByGenreButton)) {

            list.sortByGenre();
            sort = "G";
        }

        else if (button.equals(sortByTitleButton)) {

            list.sortByTitle();
            sort = "";
        }

        else if (button.equals(sortByYearButton)) {

            list.sortByYear();
            sort = "Y";
        }
        index = 0;
        numGlyphs = 0;
        window.removeAllShapes();
        addGlyphs();
        makeLegend();
        updateButtons();
    }

    /**
     * Helper method adds the glyphs to the window
     */
    private void addGlyphs() {

        int xPos = 150;
        int yPos = 70;
        for (int i = 0; i < 3; i++) { // y positions

            xPos = 150;
            if (index != songList.getLength()) {
                
                for (int j = 0; j < 3; j++) { // x positions

                    if (index != songList.getLength()) {

                        new GUIGlyph(window, xPos, yPos,
                                songList.getEntry(index), sort);
                        xPos += 250;
                        index++;
                        numGlyphs++;
                    }
                }
            }
            yPos += 200;
        }
    }

    /**
     * Creates a legend based on the representation of song data
     * @param x    The x position of the legend
     * @param y    The y position of the legend
     */
    private void legendRepresent(int x, int y) {

        if (represent.equals("H")) {

            TextShape legendText = new TextShape(x + 30, y + 5, "Hobby Legend");
            TextShape firstText = new TextShape(x + 60, y + 30, "Read");
            TextShape secondText = new TextShape(x + 60, y + 60, "Art");
            TextShape thirdText = new TextShape(x + 60, y + 90, "Sports");
            TextShape fourthText = new TextShape(x + 60, y + 120, "Music");

            legendText.setBackgroundColor(Color.WHITE);
            firstText.setBackgroundColor(Color.WHITE);
            firstText.setForegroundColor(Color.MAGENTA);
            secondText.setBackgroundColor(Color.WHITE);
            secondText.setForegroundColor(Color.BLUE);
            thirdText.setBackgroundColor(Color.WHITE);
            thirdText.setForegroundColor(Color.ORANGE);
            fourthText.setBackgroundColor(Color.WHITE);
            fourthText.setForegroundColor(Color.GREEN);

            window.addShape(legendText);
            window.addShape(firstText);
            window.addShape(secondText);
            window.addShape(thirdText);
            window.addShape(fourthText);
        }
        else if (represent.equals("M")) {

            TextShape legendText = new TextShape(x + 30, y + 5, "Major Legend");
            TextShape firstText = new TextShape(x + 60, y + 30, "Comp Sci");
            TextShape secondText = new TextShape(x + 60, y + 60, "Math");
            TextShape thirdText = new TextShape(x + 60, y + 90, "Enge Other");
            TextShape fourthText = new TextShape(x + 60, y + 120, "Other");

            legendText.setBackgroundColor(Color.WHITE);
            firstText.setBackgroundColor(Color.WHITE);
            firstText.setForegroundColor(Color.MAGENTA);
            secondText.setBackgroundColor(Color.WHITE);
            secondText.setForegroundColor(Color.BLUE);
            thirdText.setBackgroundColor(Color.WHITE);
            thirdText.setForegroundColor(Color.ORANGE);
            fourthText.setBackgroundColor(Color.WHITE);
            fourthText.setForegroundColor(Color.GREEN);

            window.addShape(legendText);
            window.addShape(firstText);
            window.addShape(secondText);
            window.addShape(thirdText);
            window.addShape(fourthText);
        }
        else if (represent.equals("R")) {

            TextShape legendText = new TextShape(x + 30, y + 5,
                    "Region Legend");
            TextShape firstText = new TextShape(x + 60, y + 30, "Northeast");
            TextShape secondText = new TextShape(x + 60, y + 60, "Southeast");
            TextShape thirdText = new TextShape(x + 60, y + 90, "US Other");
            TextShape fourthText = new TextShape(x + 60, y + 120, "Other");

            legendText.setBackgroundColor(Color.WHITE);
            firstText.setBackgroundColor(Color.WHITE);
            firstText.setForegroundColor(Color.MAGENTA);
            secondText.setBackgroundColor(Color.WHITE);
            secondText.setForegroundColor(Color.BLUE);
            thirdText.setBackgroundColor(Color.WHITE);
            thirdText.setForegroundColor(Color.ORANGE);
            fourthText.setBackgroundColor(Color.WHITE);
            fourthText.setForegroundColor(Color.GREEN);

            window.addShape(legendText);
            window.addShape(firstText);
            window.addShape(secondText);
            window.addShape(thirdText);
            window.addShape(fourthText);
        }
        else {
            throw new IllegalStateException();
        }
    }

    /**
     * Changes the bars of each glyph on the screen according to the which
     * button (hobby, major, or region) was clicked.
     * 
     * @param button
     *            The representHobbyButton, representMajorButton, or
     *            representRegionButton.
     */
    public void clickedRepresentation(Button button) {

        clickedRepresent = true;
        if (button.equals(representHobbyButton)) {

            represent = "H";
            for (int i = 0; i < songList.getLength(); i++) {

                songList.getEntry(i).representHobby(); // Not sure if this saves
                                                       // changes in songlist or
                                                       // not
            }
        }

        else if (button.equals(representMajorButton)) {

            represent = "M";
            for (int i = 0; i < songList.getLength(); i++) {

                songList.getEntry(i).representMajor();
            }
        }

        else if (button.equals(representRegionButton)) {

            represent = "R";
            for (int i = 0; i < songList.getLength(); i++) {

                songList.getEntry(i).representRegion();
            }
        }
        index = 0;
        numGlyphs = 0;
        window.removeAllShapes();
        addGlyphs();
        makeLegend();
        updateButtons();
    }

    /**
     * Method updates the buttons in the window
     */
    private void updateButtons() {

        if (clickedRepresent) {

            sortByArtistButton.enable();
            sortByTitleButton.enable();
            sortByYearButton.enable();
            sortByGenreButton.enable();
            nextButton.enable();
        }
        
        if (index - numGlyphs == 0) {

            previousButton.disable();
        }
        else {

            previousButton.enable();
        }

        if (index >= songList.getLength()) {

            nextButton.disable();
        }
        else {

            nextButton.enable();
        }
    }

    /**
     * Navigates between pages of songs whenever the next or prevous buttons are
     * clicked.
     * 
     * @param button
     *            The next or previous button
     */
    public void clickedMove(Button button) {

        if (button.equals(previousButton)) {

            index = index - (9 + numGlyphs);
            numGlyphs = 0;
            window.removeAllShapes();
            addGlyphs();
            makeLegend();
        }
        else if (button.equals(nextButton)) {

            numGlyphs = 0;
            window.removeAllShapes();
            addGlyphs();
            makeLegend();
        }
        updateButtons();
    }

    /**
     * Quits the program when the quit button is clicked.
     * 
     * @param button
     *            The quit button
     */
    public void clickedQuit(Button button) {
        System.exit(0);
    }
}
