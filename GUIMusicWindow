package prj5;

import java.awt.Color;
import CS2114.Button;
import CS2114.Shape;
import CS2114.Window;
import CS2114.WindowSide;
import CS2114.TextShape;

/**
 * Creates the game window with the buttons,
 * glyphs, and a legend.
 * @author Christian Hawkes
 */
public class GUIMusicWindow {
    
    private Button previousButton;
    private Button nextButton;
    private Button sortByArtistButton;
    private Button sortByTitleButton;
    private Button sortByYearButton;
    private Button sortByGenreButton;
    private Button representHobbyButton;
    private Button representMajorButton;
    private Button representRegionButton;
    private Button quitButton;
    private Window window;
    private DataList list;
    private LinkedList<Song> songList;
    private LinkedList<Person> personList;
    private GUIGlyph glyph;
    private String represent;
    private int index;
    
    /**
     * Instantiates all the buttons, builds the glyphs, 
     * and creates the legend.
     * @param list The data list
     */
    public GUIMusicWindow(DataList list) {
        
        window = new Window("Project 5");
        
        previousButton = new Button("<-- Prev");
        nextButton = new Button("Next -->");
        sortByArtistButton = new Button("Sort By Artist Name");
        sortByTitleButton = new Button("Sort By Song Title");
        sortByYearButton = new Button("Sort By Release Year");
        sortByGenreButton = new Button("Sort By Genre");
        representHobbyButton = new Button("Represent Hobby");
        representMajorButton = new Button("Represent Major");
        representRegionButton = new Button("Represent Region");
        quitButton = new Button("Quit");
        
        this.list = list;
        
        window.addButton(previousButton, WindowSide.NORTH);
        window.addButton(sortByArtistButton, WindowSide.NORTH);
        window.addButton(sortByTitleButton, WindowSide.NORTH);
        window.addButton(sortByYearButton, WindowSide.NORTH);
        window.addButton(sortByGenreButton, WindowSide.NORTH);
        window.addButton(nextButton, WindowSide.NORTH);
        previousButton.disable();
        
        window.addButton(representHobbyButton, WindowSide.SOUTH);
        window.addButton(representMajorButton, WindowSide.SOUTH);
        window.addButton(representRegionButton, WindowSide.SOUTH);
        window.addButton(quitButton, WindowSide.SOUTH);
        
        quitButton.onClick(this, "clickedQuit");
        previousButton.onClick(this, "clickedMove");
        nextButton.onClick(this, "clickedMove");
        sortByArtistButton.onClick(this, "clickedCategory");
        sortByTitleButton.onClick(this, "clickedCategory");
        sortByYearButton.onClick(this, "clickedCategory");
        sortByGenreButton.onClick(this, "clickedCategory");
        representHobbyButton.onClick(this, "clickedRepresentation");
        representMajorButton.onClick(this, "clickedRepresentation");
        representRegionButton.onClick(this, "clickedRepresentation");
        
        window.setSize(1020, 770);
        represent = "";
        index = 0;
        songList = list.getSongList();
        personList = list.getPersonList();
    }
    
    /**
     * Returns the window.
     * @return the window
     */
    public Window getWindow() {
        return window;
    }
    
    /**
     * Creates the legend in the lower right hand corner of the window
     * that shows how the survey results are currently being represented.
     */
    public void makeLegend() {
        int x = (window.getGraphPanelWidth()/2) + 110;
        int y = (window.getGraphPanelHeight()/2) + 110;
        Shape legend = new Shape(x, y, 150, 250, Color.WHITE);
        legend.setForegroundColor(Color.BLACK);
        
        legendRepresent(x, y);
        
        TextShape songTitle = new TextShape(x + 50, y + 140,"Song Title");
        TextShape heardText = new TextShape(x + 20, y + 180,"Heard");
        TextShape likedText = new TextShape(x + 100, y + 180,"Liked");
        Shape legendDivider = new Shape(x + 80, y + 160, 5, 60, Color.BLACK);
        
        songTitle.setBackgroundColor(Color.WHITE);
        heardText.setBackgroundColor(Color.WHITE);
        likedText.setBackgroundColor(Color.WHITE);
        
        window.addShape(legend);
        window.moveToBack(legend);
        window.addShape(songTitle);
        window.moveToFront(songTitle);
        window.addShape(heardText);
        window.moveToFront(heardText);
        window.addShape(legendDivider);
        window.moveToFront(legendDivider);
        window.addShape(likedText);
        window.moveToFront(likedText);
    }
    
    /**
     * Changes the list of songs represented on 
     * the screen based on which sort button
     * was pressed.
     * @param button The sortBy button
     */
    public void clickedCategory(Button button) {
        if (button.equals(sortByArtistButton)) {
            list.sortByArtist();
            window.removeAllShapes();
            makeLegend();
            
        }
        
        else if (button.equals(sortByGenreButton)) {
            list.sortByGenre();
            
        }
        
        else if (button.equals(sortByTitleButton)) {
            list.sortByTitle();
        }
        
        else if (button.equals(sortByYearButton)) {
            list.sortByYear();
        }
    }
    
    private void legendRepresent(int x, int y) {
        
        if (represent.equals("H")) {
            
            TextShape legendText = new TextShape(x + 30, y + 5,"Hobby Legend");
            TextShape firstText = new TextShape(x + 60, y + 30,"Read");
            TextShape secondText = new TextShape(x + 60, y + 60,"Art");
            TextShape thirdText = new TextShape(x + 60, y + 90,"Sports");
            TextShape fourthText = new TextShape(x + 60, y + 120,"Music");
            
            legendText.setBackgroundColor(Color.WHITE);
            firstText.setBackgroundColor(Color.WHITE);
            firstText.setForegroundColor(Color.MAGENTA);
            secondText.setBackgroundColor(Color.WHITE);
            secondText.setForegroundColor(Color.BLUE);
            thirdText.setBackgroundColor(Color.WHITE);
            thirdText.setForegroundColor(Color.ORANGE);
            fourthText.setBackgroundColor(Color.WHITE);
            fourthText.setForegroundColor(Color.GREEN);
            
            window.addShape(legendText);
            window.moveToFront(legendText);
            window.addShape(firstText);
            window.moveToFront(firstText);
            window.addShape(secondText);
            window.moveToFront(secondText);
            window.addShape(thirdText);
            window.moveToFront(thirdText);
            window.addShape(fourthText);
            window.moveToFront(fourthText);
        }
        
        else if (represent.equals("M")) {
            
            TextShape legendText = new TextShape(x + 30, y + 5,"Major Legend");
            TextShape firstText = new TextShape(x + 60, y + 30,"Comp Sci");
            TextShape secondText = new TextShape(x + 60, y + 60,"Math");
            TextShape thirdText = new TextShape(x + 60, y + 90,"Enge Other");
            TextShape fourthText = new TextShape(x + 60, y + 120,"Other");
            
            legendText.setBackgroundColor(Color.WHITE);
            firstText.setBackgroundColor(Color.WHITE);
            firstText.setForegroundColor(Color.MAGENTA);
            secondText.setBackgroundColor(Color.WHITE);
            secondText.setForegroundColor(Color.BLUE);
            thirdText.setBackgroundColor(Color.WHITE);
            thirdText.setForegroundColor(Color.ORANGE);
            fourthText.setBackgroundColor(Color.WHITE);
            fourthText.setForegroundColor(Color.GREEN);
            
            window.addShape(legendText);
            window.moveToFront(legendText);
            window.addShape(firstText);
            window.moveToFront(firstText);
            window.addShape(secondText);
            window.moveToFront(secondText);
            window.addShape(thirdText);
            window.moveToFront(thirdText);
            window.addShape(fourthText);
            window.moveToFront(fourthText);
        }

        else if (represent.equals("R")) {
            
            TextShape legendText = new TextShape(x + 30, y + 5,"Region Legend");
            TextShape firstText = new TextShape(x + 60, y + 30,"Northeast");
            TextShape secondText = new TextShape(x + 60, y + 60,"Southeast");
            TextShape thirdText = new TextShape(x + 60, y + 90,"US Other");
            TextShape fourthText = new TextShape(x + 60, y + 120,"Other");
            
            legendText.setBackgroundColor(Color.WHITE);
            firstText.setBackgroundColor(Color.WHITE);
            firstText.setForegroundColor(Color.MAGENTA);
            secondText.setBackgroundColor(Color.WHITE);
            secondText.setForegroundColor(Color.BLUE);
            thirdText.setBackgroundColor(Color.WHITE);
            thirdText.setForegroundColor(Color.ORANGE);
            fourthText.setBackgroundColor(Color.WHITE);
            fourthText.setForegroundColor(Color.GREEN);
            
            window.addShape(legendText);
            window.moveToFront(legendText);
            window.addShape(firstText);
            window.moveToFront(firstText);
            window.addShape(secondText);
            window.moveToFront(secondText);
            window.addShape(thirdText);
            window.moveToFront(thirdText);
            window.addShape(fourthText);
            window.moveToFront(fourthText);
        }
        else {
            throw new IllegalStateException();
        }
    }
    
    /**
     * Changes the bars of each glyph on the screen 
     * according to the which button (hobby, major,
     * or region) was clicked.
     * @param button The representHobbyButton, representMajorButton,
     * or representRegionButton.
     */
    public void clickedRepresentation(Button button) {
        
        if (button.equals(representHobbyButton)) {
            
            represent = "H";
            window.removeAllShapes();
            makeLegend();
            for (int i = 0; i < songList.getLength(); i++) {
                
                songList.getEntry(i).representHobby();   //Not sure if this saves changes in songlist or not
            }
        }
        
        else if (button.equals(representMajorButton)) {
            
            represent = "M";
            window.removeAllShapes();
            makeLegend();
            for (int i = 0; i < songList.getLength(); i++) {
                
                songList.getEntry(i).representMajor();
            }
        }
        
        else if (button.equals(representRegionButton)) {
            
            represent = "R";
            window.removeAllShapes();
            makeLegend();
            for (int i = 0; i < songList.getLength(); i++) {
                
                songList.getEntry(i).representRegion();
            }
        }
    }
    
    
    
    /**
     * Navigates between pages of songs whenever the
     * next or prevous buttons are clicked.
     * @param button The next or previous button
     */
    public void clickedMove(Button button) {
        if (button.equals(nextButton)) {
            previousButton.enable();
        }
        
        else if (button.equals(previousButton)) {
            
        }
    }
    
    /**
     * Quits the program when the quit button is clicked.
     * @param button The quit button
     */
    public void clickedQuit(Button button) {  
        System.exit(0);
    }
}
