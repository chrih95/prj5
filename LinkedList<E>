package prj5;

import java.util.Comparator; //should take this out
import java.util.Iterator;
import java.util.NoSuchElementException;

import list.ListInterface;
/**
 * This class implements a linked list data structure
 * @author Owner
 * @version (4.16.16)
 * @param <E>
 */
public class LinkedList<E> implements ListInterface<E>, Iterable<E> {

    private Node<E> firstNode;
    private int numberOfEntries;

    /**
    * Instantiates the first node and sets the numberOfEntries to 0
    */
    public LinkedList() {
        firstNode = null;
        numberOfEntries = 0;
    }

    /**
    * Creates a new node with the given data and
    * adds the new node to the front of the list.
    * @param newEntry The item to add
    */
    @Override
    public void add(E newEntry) {
        Node<E> newNode = new Node<E>(newEntry);
        if (firstNode == null) {
            firstNode = newNode;
        }
        else {
            newNode.setNextNode(firstNode);
            firstNode = newNode;
        }
        numberOfEntries++;
    }
    
    /**
    * Clears the list
    */
    @Override
    public void clear() {
        firstNode = null;
        numberOfEntries = 0;
    }
    
    /**
    * Returns true if the list contains a node
    * with the given data.
    * @param findEntry The data to be found
    * @return True if the node was found
    * @return true if the item is in the list
    */
    @Override
    public boolean contains(E findEntry) {
        Iterator<E> iterator = this.iterator();
        if (findEntry != null && firstNode != null) {
            if (firstNode.getData().equals(findEntry)) {
                return true;
            }
            while (iterator.hasNext()) {
                if (iterator.next().equals(findEntry)) {
                    return true;
                }
            }
        }

        return false;
    }
    @Override
    public E getEntry(int position) {
        Node<E> currNode = firstNode;
        if (position == 0) {
            return firstNode.getData();
        }
        for (int i = 0; i < position; i++) {
            currNode = currNode.getNextNode();
        }
        return currNode.getData();
    }
    @Override
    public int getLength() {
        return numberOfEntries;
    }
    @Override
    public boolean isEmpty() {
        return firstNode == null && numberOfEntries == 0;
    }
    
    /**
     * Method removes a node from a specified position
     * @param position    the specified position
     * @return the data from the removed node
     */
    @Override
    public E remove(int position) {
        Node<E> currNode = firstNode;
        E removedEntry = currNode.getData();
        if ((this.getLength() == 1) && position == 0) {
            // E removedEntry = currNode.getData();
            firstNode = null;
            numberOfEntries--;
        }

        else {
            if (position == 0) {
                firstNode = firstNode.getNextNode();
                numberOfEntries = 0;
            }
            for (int i = 0; i < position - 1; i++) {
                currNode = currNode.getNextNode();
            }
            removedEntry = currNode.getData();
            if (currNode.getNextNode() != null) {
                currNode.setNextNode(currNode.getNextNode().getNextNode());
            }
            numberOfEntries--;

        }
        return removedEntry;
    }
    
    @Override
    public E replace(int position, E replacementEntry) {

        Node<E> currNode = firstNode;
        if (position == 0) {
            E firstOriginalEntry = firstNode.getData();
            firstNode.setData(replacementEntry);
            return firstOriginalEntry;
        }
        for (int i = 0; i < position; i++) {
            currNode = currNode.getNextNode();
        }
        E replacedEntry = currNode.getData();
        currNode.setData(replacementEntry);
        return replacedEntry;
    }
    @Override
    public Object[] toArray() {
        Object[] array = new Object[numberOfEntries];
        Node<E> currNode = firstNode;
        for (int i = 0; i < numberOfEntries; i++) {
            array[i] = currNode.getData();
            currNode = currNode.getNextNode();
        }
        return array;
    }
    
    /**
    * Sorts the list according to the comparator passed in
    * @param comparator Used to compare the items in the list
    public void insertionSort(Comparator<? super Object> comparator) {

        for (int i = 1; i < numberOfEntries; i++) { // Insert i'th record
            for (int j = i; (j > 0) && 
                (comparator.compare(getEntry(j), getEntry(j - 1)) < 0); j--) {
                swap(j, j - 1);
            }
        }
    }
    
    /**
    * Swaps the indeces passed in
    */
    @SuppressWarnings("unchecked")
    private void swap(int j, int i) {
        Object aAtIndexJ = getEntry(j);
        replace(j, getEntry(i));
        replace(i, (E) aAtIndexJ);
    }

    /**
    * Returns a new LinkedListIterator()
    * @return a new iterator
    */
    public Iterator<E> iterator() {
        return new LinkedListIterator();
    }
//----------------------------------------------------------------------------
    /**
     * 
     * @author <chalice>
     *
     * @param <E> the type of element
     */
    @SuppressWarnings("hiding")
    private class Node<E> {

        // The data element stored in the node.
        private E data;

        // The next node in the sequence.
        private Node<E> next;

        /**
         * Creates a new node with the given data
         *
         * @param d
         *            the data to put inside the node
         */
        public Node(E d) {
            data = d;
        }

        /**
        * Sets the data of the current node
        * @param replacementEntry The new data
        */
        public void setData(E replacementEntry) {
            data = replacementEntry;
        }

        /**
         * Sets the node after this node
         *
         * @param n
         *            the node after this one
         */
        public void setNextNode(Node<E> n) {
            next = n;
        }

        /**
         * Gets the next node
         *
         * @return the next node
         */
        public Node<E> getNextNode() {
            return next;
        }

        /**
         * Gets the data in the node
         *
         * @return the data in the node
         */
        public E getData() {
            return data;
        }
    }
//----------------------------------------------------------------------------
    /**
     * 
     * @author <chalice>
     * Inner iterator class
     *
     */
    private class LinkedListIterator implements Iterator<E> {

        private int index;

        /**
        * Sets the index to 0
        */
        public LinkedListIterator() {
            index = 0;
        }
        
        /**
        * Returns true if the node has a next
        * @return true if node has next
        */
        public boolean hasNext() {
            return index < getLength();
        }
        
        /**
        * Returns the current data and increments to next node
        * @return The current data
        */
        public E next() {
            if (hasNext()) {
                E nextEntry = getEntry(index);
                index++;
                return nextEntry;
            }
            else {
                throw new NoSuchElementException("Illegal call to next(); "
                        + "iterator is after end of list.");
            }
        }
    }

}
