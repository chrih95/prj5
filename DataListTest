package prj5;

import student.TestCase;

/**
 * Tests the methods in the DataList class
 * @author alicechoi
 * @version (4.16.16)
 */
public class DataListTest extends TestCase {

    private DataList dataList;
    private Person newPerson;
    private Song newSong;

    /**
     * Instantiates the data list, the string arrays representing
     * the heards and likes, and a new person and song.
     */
    public void setUp() {
        dataList = new DataList();
        String[] heard = {"yes"};
        String[] liked = {"no"};
        newPerson = new Person(MajorEnum.COMPSCI, HobbyEnum.ART,
                RegionEnum.NORTHEAST, heard, liked);
        newSong = new Song("genre", "artist", "title", 2016, 1);
    }

    /**
     * Tests the getPersonList() method
     */
    public void testGetPersonList() {
        assertTrue(dataList.getPersonList().isEmpty());
        dataList.addPerson(newPerson);
        assertFalse(dataList.getPersonList().isEmpty());
    }
    
    /**
     * Tests the getSongList() method
     */
    public void testGetSongList() {
        assertTrue(dataList.getSongList().isEmpty());
        dataList.addSong(newSong);
        assertFalse(dataList.getSongList().isEmpty());
    }
    
    /**
     * Tests the addSong() method
     */
    public void testAddSong() {
        dataList.addSong(newSong);
        assertTrue(dataList.getSongList().contains(newSong));
    }
    
    /**
     * Tests the addPerson() method
     */
    public void testAddPerson() {
        String[] heard = {"yes"};
        String[] liked = {"no"};
        newPerson = new Person(MajorEnum.COMPSCI, HobbyEnum.ART,
                RegionEnum.NORTHEAST, heard, liked);
        dataList.addPerson(newPerson);
        assertTrue(dataList.getPersonList().contains(newPerson));
    }
    
    /**
     * Tests the addPerson() method
     */
    public void testAddPersonNull() {
        assertTrue(DataList.getPersonList().isEmpty());
        dataList.addPerson(null);
        assertTrue(DataList.getPersonList().isEmpty());
    }
    
    /**
     * Tests the toString() method
     */
    public void testToString() {
        assertEquals("", dataList.toString());
    }
    
    /**
     * Tests the sortByArtist() method
     */
    public void testSortByArtist() {
        Song songHello = new Song("Pop", "Adele", "Hello", 2016, 23);
        Song songYeah = new Song("Hip Hop", "Usher", "Yeah!", 2004, 5);
        
        dataList.addSong(songHello);
        dataList.addSong(songYeah);
        assertEquals(songYeah, dataList.getSongList().getEntry(0));
        assertEquals(songHello, dataList.getSongList().getEntry(1));
        dataList.sortByArtist();
        assertEquals(songYeah, dataList.getSongList().getEntry(1));
        assertEquals(songHello, dataList.getSongList().getEntry(0));
    }
    
    /**
     * Tests the sortByGenre() method
     */
    public void testSortByGenre() {
        Song songHello = new Song("Pop", "Adele", "Hello", 2016, 23);
        Song songYeah = new Song("Hip Hop", "Usher", "Yeah!", 2004, 5);
        dataList.addSong(songYeah);
        dataList.addSong(songHello);
        
        assertEquals(songYeah, dataList.getSongList().getEntry(1));
        assertEquals(songHello, dataList.getSongList().getEntry(0));
        dataList.sortByGenre();
        assertEquals(songYeah, dataList.getSongList().getEntry(0));
        assertEquals(songHello, dataList.getSongList().getEntry(1));
    }
    
    /**
     * Tests the sortByTitle() method
     */
    public void testSortByTitle() {
        Song songHello = new Song("Pop", "Adele", "Hello", 2016, 23);
        Song songYeah = new Song("Hip Hop", "Usher", "Yeah!", 2004, 5);
       
        dataList.addSong(songHello);
        dataList.addSong(songYeah);
        assertEquals(songYeah, dataList.getSongList().getEntry(0));
        assertEquals(songHello, dataList.getSongList().getEntry(1));
        dataList.sortByTitle();
        assertEquals(songYeah, dataList.getSongList().getEntry(1));
        assertEquals(songHello, dataList.getSongList().getEntry(0));
    }
    
    /**
     * Tests the sortByYear() method
     */
    public void testSortByYear() {
        Song songHello = new Song("Pop", "Adele", "Hello", 2016, 23);
        Song songYeah = new Song("Hip Hop", "Usher", "Yeah!", 2004, 5);
        dataList.addSong(songYeah);
        dataList.addSong(songHello);
        
        assertEquals(songYeah, dataList.getSongList().getEntry(1));
        assertEquals(songHello, dataList.getSongList().getEntry(0));
        dataList.sortByYear();
        assertEquals(songYeah, dataList.getSongList().getEntry(0));
        assertEquals(songHello, dataList.getSongList().getEntry(1));
    }
}

