package prj5;


/**
 * A class that represents a song with genre, artist, title, year, index, an
 * array of heard responses and an array of liked responses as parameters. Also
 * includes functionality to represent the list of songs by hobby, region, or
 * major.
 * 
 * @author Chandler Manns
 * @version (4.16.16)
 */
public class Song {

    private int[] heard;
    private int[] liked;
    private String genre;
    private String artist;
    private String title;
    private int year;
    private int index;

    /**
     * Creates a new Song with a genre, artist, region, and an index to find the
     * song.
     * 
     * @param genre
     *            The genre of the song
     * @param artist
     *            The artist of the song
     * @param title
     *            The name of the song
     * @param year
     *            The year the song came out
     * @param index
     *            The index used to find the Song
     */
    public Song(String genre, String artist, String title, int year,
            int index) {
        this.genre = genre;
        this.artist = artist;
        this.title = title;
        this.year = year;
        this.index = index;
        heard = new int[4];
        liked = new int[4];
    }

    /**
     * Returns the percentages of people who have heard the song in an array,
     * where the each element is a category of how the people are represented.
     * 
     * @return the percentages of people who have heard the song in an array
     */
    public int[] getHeard() {

        return heard;
    }

    /**
     * Returns the percentages of people who liked the song in an array, where
     * the each element is a category of how the people are represented.
     * 
     * @return the percentages of people who liked the song in an array
     */
    public int[] getLiked() {

        return liked;
    }

    /**
     * Method returns the genre of the song
     * 
     * @return the genre of the song
     */
    public String getGenre() {

        return genre;
    }

    /**
     * Method returns the artist of the song
     * 
     * @return the artist of the song
     */
    public String getArtist() {

        return artist;
    }

    /**
     * Method returns the name of the song
     * 
     * @return the name of the song
     */
    public String getTitle() {

        return title;
    }

    /**
     * Method returns the year the song came out
     * 
     * @return the song's release year
     */
    public int getYear() {
        return year;
    }

    /**
     * Method returns the index used to find the song
     * 
     * @return the index of the song
     */
    public int getIndex() {
        return index;
    }

    /**
     * Method returns the String representation of the Song
     * 
     * @return the String representation of the Song
     */
    @Override
    public String toString() {

        StringBuilder songString = new StringBuilder("Song Title: ");
        songString.append(this.getTitle() + "\n");
        songString.append("Song Artist: ");
        songString.append(this.getArtist() + "\n");
        songString.append("Song Genre: ");
        songString.append(this.getGenre() + "\n");
        songString.append("Song Year: ");
        songString.append(this.getYear());
        return songString.toString();
    }

    /**
     * Represents the student survey data by hobby.
     * 
     * @return A string representation of the data represented by hobby
     */
    public String representHobby() {

        int[] heardSong = new int[4];
        int[] likedSong = new int[4];
        int[] heardHobby = new int[4];
        int[] likedHobby = new int[4];
        LinkedList<Person> personList = DataList.getPersonList();

        for (int i = 0; i < personList.getLength(); i++) {

            Person person = personList.getEntry(i);
            String[] heardPerson = person.getHeard();
            String heardResponse = heardPerson[index];
            HobbyEnum hobby = person.getHobby();

            if (heardResponse.equals("Yes")) {

                heardSong[hobby.getArrayIndex()]++;
                heardHobby[hobby.getArrayIndex()]++;
            }
            else if (heardResponse.equals("No")) {

                heardHobby[hobby.getArrayIndex()]++;
            }

            String[] likedPerson = person.getLiked();
            String likedResponse = likedPerson[index];

            if (likedResponse.equals("Yes")) {

                likedSong[hobby.getArrayIndex()]++;
                likedHobby[hobby.getArrayIndex()]++;
            }
            else if (likedResponse.equals("No")) {

                likedHobby[hobby.getArrayIndex()]++;
            }
        }

        calculatePercents(heardSong, heardHobby, likedSong, likedHobby);

        heard = heardSong;
        liked = likedSong;

        // this.toString();
        StringBuilder hobbyString = new StringBuilder("Heard\n");
        hobbyString.append("reading:" + heardSong[0] + " art:" + heardSong[1]
                + " sports:" + heardSong[2] + " music:" + heardSong[3] + "\n");
        hobbyString.append("Likes:\n");
        hobbyString.append("reading:" + likedSong[0] + " art:" + likedSong[1]
                + " sports:" + likedSong[2] + " music:" + likedSong[3] + "\n");
        return hobbyString.toString();
    }

    /**
     * Represents the student survey data by region.
     * 
     * @return A string representation of the data represented by region
     */
    public String representRegion() {

        int[] heardSong = new int[4];
        int[] likedSong = new int[4];
        int[] heardRegion = new int[4];
        int[] likedRegion = new int[4];
        LinkedList<Person> personList = DataList.getPersonList();

        for (int i = 0; i < personList.getLength(); i++) {

            Person person = personList.getEntry(i);
            String[] heardPerson = person.getHeard();
            String heardResponse = heardPerson[index];
            RegionEnum region = person.getRegion();

            if (heardResponse.equals("Yes")) {

                heardSong[region.getArrayIndex()]++;
                heardRegion[region.getArrayIndex()]++;
            }
            else if (heardResponse.equals("No")) {

                heardRegion[region.getArrayIndex()]++;
            }

            String[] likedPerson = person.getLiked();
            String likedResponse = likedPerson[index];

            if (likedResponse.equals("Yes")) {

                likedSong[region.getArrayIndex()]++;
                likedRegion[region.getArrayIndex()]++;
            }
            else if (likedResponse.equals("No")) {

                likedRegion[region.getArrayIndex()]++;
            }
        }

        calculatePercents(heardSong, heardRegion, likedSong, likedRegion);

        heard = heardSong;
        liked = likedSong;

        this.toString();
        StringBuilder regionString = new StringBuilder("Heard\n");
        regionString.append("northeast:" + heardSong[0] + " southeast:"
                + heardSong[1] + " US other:" + heardSong[2] + " other:"
                + heardSong[3] + "\n");
        regionString.append("Likes:\n");
        regionString.append("northeast:" + likedSong[0] + " southeast:"
                + likedSong[1] + " US other:" + likedSong[2] + " other:"
                + likedSong[3] + "\n");
        return regionString.toString();
    }

    /**
     * Represents the student survey data by region.
     * 
     * @return A string representation of the data represented by region
     */
    public String representMajor() {

        int[] heardSong = new int[4];
        int[] likedSong = new int[4];
        int[] heardMajor = new int[4];
        int[] likedMajor = new int[4];
        LinkedList<Person> personList = DataList.getPersonList();

        for (int i = 0; i < personList.getLength(); i++) {

            Person person = personList.getEntry(i);
            String[] heardPerson = person.getHeard();
            String heardResponse = heardPerson[index];
            MajorEnum major = person.getMajor();

            if (heardResponse.equals("Yes")) {

                heardSong[major.getArrayIndex()]++;
                heardMajor[major.getArrayIndex()]++;
            }
            else if (heardResponse.equals("No")) {

                heardMajor[major.getArrayIndex()]++;
            }

            String[] likedPerson = person.getLiked();
            String likedResponse = likedPerson[index];

            if (likedResponse.equals("Yes")) {

                likedSong[major.getArrayIndex()]++;
                likedMajor[major.getArrayIndex()]++;
            }
            else if (likedResponse.equals("No")) {

                likedMajor[major.getArrayIndex()]++;
            }
        }

        calculatePercents(heardSong, heardMajor, likedSong, likedMajor);

        heard = heardSong;
        liked = likedSong;

        toString();
        StringBuilder majorString = new StringBuilder("Heard\n");
        majorString.append("comp sci:" + heardSong[0] + " math:" + heardSong[1]
                + " other enge:" + heardSong[2] + " other:" + heardSong[3]
                + "\n");
        majorString.append("Likes:\n");
        majorString.append("compsci:" + likedSong[0] + " southeast:"
                + likedSong[1] + " other enge:" + likedSong[2] + " other:"
                + likedSong[3] + "\n");
        return majorString.toString();
    }

    /**
     * Helper Method calculates the percentages of people that have heard or
     * liked a song.
     * 
     * @param heardSong
     *            Number of people that have heard of a song, split by
     *            representation
     * @param heardTotal
     *            Total number of people split by representation
     * @param likedSong
     *            Number of people that have liked of a song, split by
     *            representation
     * @param likedTotal
     *            Total number of people split by representation
     */
    private void calculatePercents(int[] heardSong, int[] heardTotal,
            int[] likedSong, int[] likedTotal) {

        // percentages for heards
        if (heardTotal[0] != 0) {

            heardSong[0] = (heardSong[0] * 100) / heardTotal[0];
        }
        else {
            heardSong[0] = 0;
        }
        if (heardTotal[1] != 0) {
            heardSong[1] = (heardSong[1] * 100) / heardTotal[1];
        }
        else {

            heardSong[1] = 0;
        }
        if (heardTotal[2] != 0) {

            heardSong[2] = (heardSong[2] * 100) / heardTotal[2];
        }
        else {
            heardSong[2] = 0;
        }
        if (heardTotal[3] != 0) {

            heardSong[3] = (heardSong[3] * 100) / heardTotal[3];
        }
        else {
            heardSong[3] = 0;
        }

        // percentages for likes
        if (likedTotal[0] != 0) {

            likedSong[0] = (likedSong[0] * 100) / likedTotal[0];
        }
        else {
            likedSong[0] = 0;
        }
        if (likedTotal[1] != 0) {
            likedSong[1] = (likedSong[1] * 100) / likedTotal[1];
        }
        else {

            likedSong[1] = 0;
        }
        if (likedTotal[2] != 0) {

            likedSong[2] = (likedSong[2] * 100) / likedTotal[2];
        }
        else {
            likedSong[2] = 0;
        }
        if (likedTotal[3] != 0) {

            likedSong[3] = (likedSong[3] * 100) / likedTotal[3];
        }
        else {
            likedSong[3] = 0;
        }
    }
}
